/* Matrix.cpp defines Matrix class methods.
 * Student Name:
 * Date:
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#include "Matrix.h"

Matrix::Matrix() {
	myRows = myColumns = 0;
}

Matrix::Matrix(unsigned rows, unsigned columns) {
	myRows = rows;
	myColumns = columns;
	myVec.setSize(rows);
	for (unsigned i = 0; i < rows; i++) {
		myVec[i].setSize(columns);
	}

}

const Vec<Item>& Matrix::operator[](unsigned index) const {
	if (index < myRows) {
		return myVec[index];
	}
	else {
		throw range_error("Invalid Index");
	}
}

Vec<Item>& Matrix::operator[](unsigned index) {
	if (index < myRows) {
		return myVec[index];
	}
	else {
		throw range_error("Invalid Index");
	}
}

bool Matrix::operator==(const Matrix& m2) const {
   if ( myRows != m2.myRows || myColumns != m2.myColumns ) {
        return false;
   }
   else {
        return myVec == m2.myVec;
   }
}

bool Matrix::operator!=(const Matrix& m2) const {
	return !(*this==m2);
}

Matrix Matrix::operator+(const Matrix& m2) {
	Matrix out(myRows,myColumns);
	if ( myRows != m2.myRows || myColumns != m2.myColumns) {
		throw invalid_argument("Different Sized Matrices");
	}
	else {
		for (unsigned i = 0; i < myRows; i++) {
			for (unsigned j = 0; j < myColumns; i++) {
				cout << i << " " << j << endl;
				out[i][j] = (myVec[i])[j] + m2[i][j];
			}
		}
	}
	return out;
}
//
//void Matrix::readFrom(istream cin) {
//	for (unsigned i = 0; i < myRows; i++) {
//		for (unsigned j = 0; j < myColumns; i++) {
//			cin >> myVec[i][j];
//			cout << myVec[i][j] << " " << flush;
//		}
//		cout << "\n";
//	}
//}
