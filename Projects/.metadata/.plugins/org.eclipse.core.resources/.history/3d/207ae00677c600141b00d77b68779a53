/* Matrix.cpp defines Matrix class methods.
 * Student Name: Kristofer Brink
 * Date: Wednesday, March 4, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#include "Matrix.h"
#include <fstream>
#include <stdexcept>


/* Matrix() default constructor
 *
 */
Matrix::Matrix() {
	myRows = myColumns = 0;
	myVec.setSize(0);
}

/* Matrix() explicit constructor.
 *
 * @param: rows, amount of rows for matrix
 * @param: columns, amount of columns for matrix
 */
Matrix::Matrix(unsigned rows, unsigned columns) {
	myRows = rows;
	myColumns = columns;
	myVec.setSize(rows);
	for (unsigned i = 0; i < rows; i++) {
		myVec[i].setSize(columns);
	}
}

/* getRows() returns the amount of rows.
 *
 * @return: unsigned
 */
unsigned Matrix::getRows() const {
	return myRows;
}

/* getColumns() returns the amount of columns.
 *
 * @return: unsigned
 */
unsigned Matrix::getColumns() const {
	return myColumns;
}

/* operator==() returns true if matrix is equal to m2.
 *
 * @param: m2, another matrix
 * @return: bool
 */
bool Matrix::operator==(const Matrix& m2) const {
	if ( myRows != m2.getRows() || myColumns != m2.getColumns() ) {
		return false;
	} else {
		return myVec == m2.myVec;
	}
}

/* operator!=() returns true if matrix is different than m2
 *
 * @param: m2, another matrix
 * @return: bool
 */
bool Matrix::operator!=(const Matrix& m2) const {
	return !(*this==m2);
}

/* writeTo() outputs a matrix into a .txt file
 *
 * @param: fileIn, file to be read from
 */
void Matrix::writeTo (string fileName){
	ofstream fout(fileName.c_str());
	fout << myRows << " " << myColumns << endl;
	for (unsigned i=0; i < myRows; i++) {
		myVec[i].writeTo(fout);
	}
}

/* readFrom() reads rows then columns and puts them into matrix.
 *
 * @param: fileIn, file to be read from
 */
void Matrix::readFrom(string fileIn) {
	ifstream in(fileIn.c_str());
	in >> myRows;
	myVec.setSize(myRows);
	in >> myColumns;
	for (unsigned i = 0; i < myRows; i++) {
		myVec[i].setSize(myColumns);
		myVec[i].readFrom(in);
	}
}

/* writeTo() writes matrix to stream.
 *
 * @param: cout, stream to write matrix to.
 */
void Matrix::writeTo(ostream& cout) const{
	for (unsigned i = 0; i < myRows; i++) {
		myVec[i].writeTo(cout);
	}
}

/* readFrom()reads matrix from stream.
 *
 * @param: in, stream to read matrix in from.
 */
void Matrix::readFrom(istream& in){
	for (unsigned i=0; i < myRows; i++) {
		myVec[i].readFrom(in);
	}
}

/* operator+() adds two matrixes.
 *
 * @param: m2, other matrix.
 * @return: newMatrix, the addition
 */
Matrix Matrix::operator+(const Matrix& m2) const{
	if ( myRows != m2.myRows || myColumns != m2.myColumns ) {
		throw invalid_argument("Cannot add matrixes of different sizes");
	}
	Matrix newMatrix(myRows, myColumns);
	for (unsigned i = 0; i < myRows; i++) {
		newMatrix[i] = myVec[i] + m2.myVec[i];
	}
	return newMatrix;
}


/* operator-() subracts two matrixes.
 *
 * @param: m2, other matrix.
 * @return: newMatrix, the subtraction
 */
Matrix Matrix::operator-(const Matrix& m2) const{
	if ( myRows != m2.myRows || myColumns != m2.myColumns ) {
		throw invalid_argument("Cannot subtract matrixes of different sizes");
	}
	Matrix newMatrix(myRows, myColumns);
	for (unsigned i = 0; i < myRows; i++) {
		newMatrix[i] = myVec[i] - m2.myVec[i];
	}
	return newMatrix;
}

Matrix Matrix::operator*(const Matrix& m2) const{
	Matrix output(myRows,m2.myColumns);
	if (myColumns != m2.myRows) {
		throw invalid_argument("Matrix 1 must have as many columns and Matrix 2 has rows");
	}
	for (unsigned r = 0; r < myRows; r++){
		for (unsigned c = 0; c < m2.myColumns; c++) {
			for (unsigned i = 0; i < myColumns; i++) {
				output[r][c] += myVec[r][i] * m2.myVec[i][c];
			}
		}
	}
	return output;
}

/* getTranspose() transposes matrix (makes rows columns and columns rows).
 *
 * @return: Matrix, matrix that is the transposed of myVec.
 */
Matrix Matrix::getTranspose() const{
	Matrix newMatrix(myColumns, myRows);
	for (unsigned row = 0; row < myRows; row++) {
		for (unsigned col = 0; col < myColumns; col++) {
			newMatrix.myVec[col][row] = myVec[row][col];
		}
	}
	return newMatrix;
}
