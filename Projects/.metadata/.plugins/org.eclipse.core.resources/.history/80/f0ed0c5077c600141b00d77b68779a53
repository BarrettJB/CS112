/* Matrix.h provides a class for manipulating 2-dimensional vectors.
 * Student Name: Kristofer Brink
 * Date: Wednesday, March 4, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#ifndef MATRIX_H_
#define MATRIX_H_

#include "Vec.h"

typedef double Item;

class Matrix {
public:
	Matrix();
	Matrix(unsigned, unsigned);
	unsigned getRows() const;
	unsigned getColumns() const;
	Vec<Item> operator [] (unsigned index) const {
		if ( index >= myRows ) throw range_error("Bad index");
		return myVec[index];}
	Vec<Item> & operator [] (unsigned index) {
		if ( index >= myRows ) throw range_error("Bad index");
		return myVec[index];}
	bool operator==(const Matrix& m2) const;
	bool operator!=(const Matrix& m2) const;
	void writeTo (string fileName);
	void readFrom(string fileIn);
	void writeTo(ostream& cout) const;
	void readFrom(istream& in);
	Matrix operator+(const Matrix& m2) const;
	Matrix operator-(const Matrix& m2) const;
	Matrix operator*(const Matrix& m2) const;
	Matrix getTranspose() const;

private:
	unsigned myRows;
	unsigned myColumns;
	Vec< Vec<Item> > myVec;
	friend class MatrixTester;
};

#endif
