Script started on Mon 09 Mar 2015 07:14:35 PM EDT
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ ls
[0m[01;34mDebug[0m       MatrixTest1Copy2.txt  tester.cpp        vecTest1.txt
mat1.txt    MatrixTest1Copy.txt   typescript        vecTest2Copy.txt
mat2.txt    MatrixTest1.txt       Vec.h             vecTest2.txt
Matrix.cpp  MatrixTester.cpp      vecStreamOut.txt  VecTester.cpp
Matrix.h    MatrixTester.h        vecTest1Copy.txt  VecTester.h
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ cat tesw[Kter.cpp
/* tester.cpp drives the testing of our Vec template and Matrix class.
 * Student: Barrett Bryson, Kristofer Brink
 * Date: 3/9/2015
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "MatrixTester.h"

void getTwo(Matrix<double>& m1, Matrix<double>& m2) {
	cout << "Enter name of first Matrix file(m1): " << flush;
	string file;
	cin >> file;
	m1.readFrom(file);
	cout << "Enter name of second Matrix file(m2): " << flush;
	cin >> file;
	m2.readFrom(file);
}

int main() {
	//	VecTester vt;
	//	vt.runTests();
	cout << "Enter 1 to run tests, or 0 to continue: " << flush;
	int answer;
	cin >> answer;
	if (answer == 1){
		MatrixTester mt;
		mt.runTests();
	}
	cout << '\n' << '\n' << '\n' << '\n' << '\n' << endl;
	cout << "Welcome to the Matrix Application" << endl;
	bool quit = false;
	do {
		cout << "Operations:" << endl;
		cout << " 1---Addition" << endl;
		cout << " 2---Subtraction" << endl;
		cout << " 3---Multiplication" << endl;
		cout << " 4---Transpose" << endl;
		cout << " 0---Quit" << endl;
		cout << "Please select an operation: " << flush;
		int response;
		cin >> response;

		if (response == 1) {
			Matrix<double> m1;
			Matrix<double> m2;
			Matrix<double> m3;
			getTwo(m1,m2);
			m3 = m1 + m2;
			cout << "\nm1 + m2 =" << endl;
			m3.writeTo(cout);
			cout << endl;
		}

		if (response == 2) {
			Matrix<double> m1;
			Matrix<double> m2;
			Matrix<double> m3;
			getTwo(m1,m2);
			m3 = m1 - m2;
			cout << "\nm1 - m2 =" << endl;
			m3.writeTo(cout);
			cout << endl;
		}

		if (response == 3) {
			Matrix<double> m1;
			Matrix<double> m2;
			Matrix<double> m3;
			getTwo(m1,m2);
			m3 = m1 * m2;
			cout << "\nm1 * m2 =" << endl;
			m3.writeTo(cout);
			cout << endl;
		}

		if (response == 4) {
			Matrix<double> m1;
			cout << "Enter name of Matrix file: " << flush;
			string file;
			cin >> file;
			m1.readFrom(file);
			Matrix<double> m3;
			m3 = m1.getTranspose();
			cout << "\nm1 transposed is:" << endl;
			m3.writeTo(cout);
			cout << endl;
		}

		if (response == 0) {
			quit = true;
		}
	} while (!quit);
	cout << "Goodbye" << flush;
}
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ cat matrix[K[K[K[K[K[KMatt[KrixTester.c[Kh
/* MatrixTester.h declares test-methods for class Matrix.
 * Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef MATRIXTESTER_H_
#define MATRIXTESTER_H_

#include "Matrix.h"

class MatrixTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testExplicitConstructor();
	void testCopyConstructor();
	void testAssignment();
	void testEquality();
	void testInequality();
	void testSubscripts();
	void testReadSubscript(const Matrix<double>& mat);
	void testTranspose();
	void testAddition();
	void testSubtraction();
	void testMultiply();
	void testReadFromStream();
	void testReadFromFile();
	void testWriteToStream();
	void testWriteToFile();
};

#endif /*MATRIXTESTER_H_*/
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ cat MatrixTester.cpp
/* MatrixTester.cpp defines test-methods for class Matrix.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#include "MatrixTester.h"
#include <iostream>        // cout, cerr, ...
#include <cstdlib>         // exit()
#include <stdexcept>       // range_error, ...
using namespace std;

void MatrixTester::testDefaultConstructor() {
	cout << "Testing default constructor..." << flush;
	Matrix<int> m1;
	assert( m1.getRows() == 0 );
	assert( m1.getColumns() == 0 );
	cout << " 0 " << flush;

	Matrix<double> m2;
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testExplicitConstructor() {
	cout << "Testing explicit constructor..." << flush;
	Matrix<int> m1(2, 3);
	assert( m1.getRows() == 2 );
	assert( m1.getColumns() == 3 );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1.myVec[i][j] == 0 );
		}
	}
	cout << " 1 " << flush;

	Matrix<double> m2(3, 1);
	assert( m2.getRows() == 3 );
	assert( m2.getColumns() == 1 );
	for (unsigned i = 0; i < m2.getRows(); i++) {
		for (unsigned j = 0; j < m2.getColumns(); j++) {
			assert( m2.myVec[i][j] == 0 );
		}
	}
	cout << " 2 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty matrix
	Matrix<unsigned> m1;
	Matrix<unsigned> m2 = Matrix<unsigned>(m1);
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec.getSize() == 0 );
	cout << " 1 " << flush;

	// copy non-empty matrix
	Matrix<int> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3.myVec[i][j] = i+j;
		}
	}
	Matrix<int> m4 = Matrix<int>(m3);
	assert( m4.getRows() == m3.getRows() );
	assert( m4.getColumns() == m3.getColumns() );
	assert( m4.myVec.getSize() == m3.myVec.getSize() );
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			assert( m4.myVec[i][j] == i+j );
		}
	}
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

void MatrixTester::testAssignment() {
	cout << "Testing =... " << flush;
	// empty to empty
	Matrix<double> m0;
	Matrix<double> m1;
	m0 = m1;
	assert( m0.getRows() == 0 );
	assert( m0.getColumns() == 0 );
	assert( m0.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty to empty
	Matrix<double> m2(2,3);
	m0 = m2;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m2.myVec );
	cout << " 1 " << flush;

	// empty to nonempty
	m2 = m1;
	assert( m2.getRows() == 0 );
	assert( m2.getColumns() == 0 );
	assert( m2.myVec == m1.myVec );
	cout << " 2 " << flush;

	// non-empty to non-empty
	Matrix<double> m3(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
		}
	}
	Matrix<double> m4(5, 4);
	m4 = m3;
	assert( m4.getRows() == 2 );
	assert( m4.getColumns() == 3 );
	assert( m4.myVec == m3.myVec );
	cout << " 3 " << flush;

	// chaining
	Matrix<double> m5;
	m5 = m0 = m4;
	assert( m0.getRows() == 2 );
	assert( m0.getColumns() == 3 );
	assert( m0.myVec == m4.myVec );
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	assert( m5.myVec == m0.myVec );
	cout << " 4 " << flush;

	// self-assignment
	m5 = m5;
	assert( m5.getRows() == 2 );
	assert( m5.getColumns() == 3 );
	for (unsigned i = 0; i < m5.getRows(); i++) {
		for (unsigned j = 0; j < m5.getColumns(); j++) {
			assert( m5[i][j] == i+j );
		}
	}
	cout << " 5 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testEquality() {
	cout << "Testing ==... " << flush;
	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( m1 == m2 );
	cout << " 1 " << flush;

	// same sized
	Matrix<double> m3(2, 3);
	Matrix<double> m4a(2, 3);
	Matrix<double> m4b(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4a[i][j] = i+j;
			m4b[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( m3 == m4a );
	assert( !(m1 == m3) );
	assert( !(m3 == m5) );
	m4b[1][1] = 0;
	assert( !(m3 == m4b) );
	cout << " 2 " << flush;

	// different row sizes
	Matrix<double> m6(3,3);
	Matrix<double> m7(2,3);
	assert( !(m6 == m7) );
	cout << " 3 " << flush;

	// same row sizes, different column sizes
	Matrix<double> m8(2,4);
	assert( !(m8 == m7 ) );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testReadSubscript(const Matrix<double>& mat) {
	for (unsigned i = 0; i < mat.getRows(); i++) {
		for (unsigned j = 0; j < mat.getColumns(); j++) {
			assert( i*j == mat[i][j] );
		}
	}
}

void MatrixTester::testSubscripts() {
	cout << "Testing subscripts... " << flush;
	Matrix<double> m(4, 3);
	// test write-subscript
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			m[i][j] = i*j;
		}
	}
	cout << " 1 " << flush;

	// test read-subscript -- see above
	//testReadSubscript(m);
	cout << " 2 " << flush;

	// exceptions
	// empty Matrix
	Matrix<double> m0;

	// read subscript
	try {
		double value = m0[0][0];
		cerr << "successfully read from empty Matrix";
		exit(1);
	} catch (range_error&) {
		cout << " 3 " << flush;
 	}

	// write subscript
	try {
		m0[0][0] = 0;
		cerr << "successfully wrote to empty Matrix";
		exit(1);
	} catch (range_error&) {
		cout << " 4 " << flush;
 	}

	// nonempty Matrix
	Matrix<double> m2(2,3);

	// beyond last row
	try {
		m2[2][0] = 0;
		cerr << "successfully wrote past last Matrix row";
		exit(1);
	} catch (range_error&) {
		cout << " 5 " << flush;
 	}

	// beyond last column
	try {
		m2[0][3] = 0;
		cerr << "successfully wrote past last Matrix column";
		exit(1);
	} catch (range_error&) {
		cout << " 6 " << flush;
 	}

	cout << "Passed!" << endl;
}


void MatrixTester::testInequality() {
	cout << "Testing !=... " << flush;

	// empty
	Matrix<double> m1;
	Matrix<double> m2;
	assert( !(m1 != m2) );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m3(2, 3);
	Matrix<double> m4(2, 3);
	Matrix<double> m5(2, 3);
	for (unsigned i = 0; i < m3.getRows(); i++) {
		for (unsigned j = 0; j < m3.getColumns(); j++) {
			m3[i][j] = i+j;
			m4[i][j] = i+j;
			m5[i][j] = i*j;
		}
	}
	assert( !(m3 != m4) );
	assert( m1 != m3 );
	assert( m3 != m5 );
	cout << " 1 " << flush;

	// nonempty, different row sizes
	Matrix<double> m6(3,3);
	for (unsigned i = 0; i < m6.getRows(); i++) {
		for (unsigned j = 0; j < m6.getColumns(); j++) {
			m6[i][j] = i+j;
		}
	}
	assert( m3 != m6 );
	cout << " 2 " << flush;

	// nonempty, different column sizes
	Matrix<double> m7(2, 4);
	for (unsigned i = 0; i < m7.getRows(); i++) {
		for (unsigned j = 0; j < m7.getColumns(); j++) {
			m7[i][j] = i+j;
		}
	}
	assert( m3 != m7 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testTranspose() {
	cout << "Testing getTranspose()... " << flush;
	// empty
	Matrix<double> m0a, m0b(2,3);
	m0b = m0a.getTranspose();
	assert( m0b.getRows() == 0 );
	assert( m0b.getColumns() == 0 );
	assert( m0b.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty
	Matrix<double> m1(4, 3);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
		}
	}
	Matrix<double> m2 = m1.getTranspose();
	assert( m2.getRows() == m1.getColumns() );
	assert( m2.getColumns() == m1.getRows() );
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m2[j][i] == m1[i][j] );
		}
	}
	cout << " 1a " << flush;
	// check that m1 is unchanged
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	cout << "Passed!" << endl;
}

void MatrixTester::testAddition() {
	cout << "Testing +... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a + m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	// nonempty, same size
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 + m2;

	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == i*j + i+j );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 + m4;
		cerr << "operator+ worked with different row sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 + m5;
		cerr << "operator+ worked with different column	sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testSubtraction() {
	cout << "Testing -... " << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a - m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	//non-empty, valid
	Matrix<double> m1(3, 4);
	Matrix<double> m2(3, 4);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i*j;
			m2[i][j] = i+j;
		}
	}

	Matrix<double> m3 = m1 - m2;
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m3[i][j] == m1[i][j] - m2[i][j] );
		}
	}
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i*j );
		}
	}
	cout << " 1b " << flush;

	// nonempty, different sized rows
	Matrix<double> m4(4,4);
	try {
		m3 = m2 - m4;
		cerr << "operator- worked with different row sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	// nonempty, different sized columns
	Matrix<double> m5(3,3);
	try {
		m3 = m2 - m5;
		cerr << "operator- worked with different column	sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 3 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testMultiply() {
	cout << "Testing *..." << flush;
	// empty
	Matrix<double> m0a, m0b, m0c(3,2);
	m0c = m0a * m0b;
	assert( m0c.getRows() == 0 );
	assert( m0c.getColumns() == 0 );
	assert( m0c.myVec.getSize() == 0 );
	cout << " 0 " << flush;

	Matrix<double> m1(2, 3);
	Matrix<double> m2(3, 2);
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			m1[i][j] = i+j+1;
			m2[j][i] = i+j+1;
		}
	}

	Matrix<double> m3 = m1 * m2;
	assert( m3.getRows() == 2);
	assert( m3.getColumns() == 2 );
	assert( m3[0][0] == 14 );
	assert( m3[0][1] == 20 );
	assert( m3[1][0] == 20 );
	assert( m3[1][1] == 29 );
	cout << " 1a " << flush;

	// check that left operand did not change
	for (unsigned i = 0; i < m1.getRows(); i++) {
		for (unsigned j = 0; j < m1.getColumns(); j++) {
			assert( m1[i][j] == i+j+1 );
		}
	}
	cout << " 1b " << flush;

	// nonempty, m1.columns != m2.rows
	Matrix<double> m4(3,3);
	try {
		m3 = m2 * m4;
		cerr << "operator* worked with bad row/column sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 2 " << flush;
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testReadFromStream() {
	cout << "Testing readFrom(istream)... " << flush;
	ifstream fin("MatrixTest1.txt");
	assert( fin.is_open() );
	unsigned rows, columns;
	fin >> rows >> columns;
	Matrix<double> m(rows, columns);
	m.readFrom(fin);
	for (unsigned i = 0; i < rows; i++) {
		for (unsigned j = 0; j < columns; j++) {
			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}
	cout << "Passed!" << endl;
}

void MatrixTester::testReadFromFile() {
	cout << "Testing readFrom(string)... " << flush;
	Matrix<double> m;
	m.readFrom("MatrixTest1.txt");
	assert( m.getRows() == 3 );
	assert( m.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)... " << flush;
	Matrix<double> m;
	// read a Matrix whose values we know
	m.readFrom("MatrixTest1.txt");
	ofstream fout("MatrixTest1Copy.txt");
	assert( fout.is_open() );
	// now write it to a file via a stream
	fout << m.getRows() << " " << m.getColumns() << "\n";
	m.writeTo(fout);
	fout.close();
	// now, read what we just wrote into a different Matrix
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy.txt");
	// and test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}

void MatrixTester::testWriteToFile() {
	cout << "Testing writeTo(string)... " << flush;
	Matrix<double> m;
	// read in a Matrix whose values we know
	m.readFrom("MatrixTest1.txt");
	// write it to a file
	m.writeTo("MatrixTest1Copy2.txt");
	// now, read what we just wrote into a different Matrix
	Matrix<double> m1;
	m1.readFrom("MatrixTest1Copy2.txt");
	// test it
	assert( m1.getRows() == 3 );
	assert( m1.getColumns() == 4 );
	for (unsigned i = 0; i < m.getRows(); i++) {
		for (unsigned j = 0; j < m.getColumns(); j++) {
			assert( m1[i][j] == i*m.getColumns()+j+1 );
		}
	}

	cout << "Passed!" << endl;
}


void MatrixTester::runTests() {
	cout << "Running Matrix tests..." << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testAssignment();
	testEquality();
	testSubscripts();
	testInequality();
	testTranspose();
	testAddition();
	testSubtraction();
	testMultiply();
	testReadFromStream();
	testWriteToStream();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ cat Matrix.h
/* Matrix.h provides a class for manipulating 2-dimensional vectors.
 * Student Name: Kristofer Brink, Barrett Bryson
 * Barrett Bryson: wrote member 1
 * Kristofer Brink: wrote member 2
 * Date: Wednesday, March 9, 2015
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */

#ifndef MATRIX_H_
#define MATRIX_H_

#include "Vec.h"
#include <fstream>
#include <stdexcept>

template <class Item>
class Matrix {
public:
	Matrix();
	Matrix(unsigned, unsigned);
	unsigned getRows() const;
	unsigned getColumns() const;
	Vec<Item> operator [] (unsigned index) const {
		if ( index >= myRows ) throw range_error("Bad index");
		return myVec[index];}
	Vec<Item> & operator [] (unsigned index) {
		if ( index >= myRows ) throw range_error("Bad index");
		return myVec[index];}
	bool operator==(const Matrix& m2) const;
	bool operator!=(const Matrix& m2) const;
	void writeTo (string fileName);
	void readFrom(string fileIn);
	void writeTo(ostream& cout) const;
	void readFrom(istream& in);
	Matrix<Item> operator+(const Matrix<Item>& m2) const;
	Matrix<Item> operator-(const Matrix<Item>& m2) const;
	Matrix<Item> operator*(const Matrix<Item>& m2) const;
	Matrix<Item> getTranspose() const;

private:
	unsigned myRows;
	unsigned myColumns;
	Vec< Vec<Item> > myVec;
	friend class MatrixTester;
};

/* Matrix() default constructor
 *
 */
template <class Item>
Matrix<Item>::Matrix() {
	myRows = myColumns = 0;
	myVec.setSize(0);
}

/* Matrix() explicit constructor.
 *
 * @param: rows, amount of rows for matrix
 * @param: columns, amount of columns for matrix
 */
template <class Item>
Matrix<Item>::Matrix(unsigned rows, unsigned columns) {
	myRows = rows;
	myColumns = columns;
	myVec.setSize(rows);
	for (unsigned i = 0; i < rows; i++) {
		myVec[i].setSize(columns);
	}
}

/* getRows() returns the amount of rows.
 *
 * @return: unsigned
 */
template <class Item>
unsigned Matrix<Item>::getRows() const {
	return myRows;
}

/* getColumns() returns the amount of columns.
 *
 * @return: unsigned
 */
template <class Item>
unsigned Matrix<Item>::getColumns() const {
	return myColumns;
}

/* operator==() returns true if matrix is equal to m2.
 *
 * @param: m2, another matrix
 * @return: bool
 */
template <class Item>
bool Matrix<Item>::operator==(const Matrix<Item>& m2) const {
	if ( myRows != m2.getRows() || myColumns != m2.getColumns() ) {
		return false;
	} else {
		return myVec == m2.myVec;
	}
}

/* operator!=() returns true if matrix is different than m2
 *
 * @param: m2, another matrix
 * @return: bool
 */
template <class Item>
bool Matrix<Item>::operator!=(const Matrix<Item>& m2) const {
	return !(*this==m2);
}

/* writeTo() outputs a matrix into a .txt file
 *
 * @param: fileIn, file to be read from
 */
template <class Item>
void Matrix<Item>::writeTo (string fileName){
	ofstream fout(fileName.c_str());
	fout << myRows << " " << myColumns << endl;
	for (unsigned i=0; i < myRows; i++) {
		myVec[i].writeTo(fout);
	}
}

/* readFrom() reads rows then columns and puts them into matrix.
 *
 * @param: fileIn, file to be read from
 */
template <class Item>
void Matrix<Item>::readFrom(string fileIn) {
	ifstream in(fileIn.c_str());
	in >> myRows;
	myVec.setSize(myRows);
	in >> myColumns;
	for (unsigned i = 0; i < myRows; i++) {
		myVec[i].setSize(myColumns);
		myVec[i].readFrom(in);
	}
}

/* writeTo() writes matrix to stream.
 *
 * @param: cout, stream to write matrix to.
 */
template <class Item>
void Matrix<Item>::writeTo(ostream& cout) const{
	for (unsigned i = 0; i < myRows; i++) {
		myVec[i].writeTo(cout);
	}
}

/* readFrom()reads matrix from stream.
 *
 * @param: in, stream to read matrix in from.
 */
template <class Item>
void Matrix<Item>::readFrom(istream& in){
	for (unsigned i=0; i < myRows; i++) {
		myVec[i].readFrom(in);
	}
}

/* operator+() adds two matrixes.
 *
 * @param: m2, other matrix.
 * @return: newMatrix, the addition
 */
template <class Item>
Matrix<Item> Matrix<Item>::operator+(const Matrix<Item>& m2) const{
	if ( myRows != m2.myRows || myColumns != m2.myColumns ) {
		throw invalid_argument("Cannot add matrixes of different sizes");
	}
	Matrix newMatrix(myRows, myColumns);
	for (unsigned i = 0; i < myRows; i++) {
		newMatrix[i] = myVec[i] + m2.myVec[i];
	}
	return newMatrix;
}

/* operator-() subracts two matrixes.
 *
 * @param: m2, other matrix.
 * @return: newMatrix, the subtraction
 */
template <class Item>
Matrix<Item> Matrix<Item>::operator-(const Matrix<Item>& m2) const{
	if ( myRows != m2.myRows || myColumns != m2.myColumns ) {
		throw invalid_argument("Cannot subtract matrixes of different sizes");
	}
	Matrix<Item> newMatrix(myRows, myColumns);
	for (unsigned i = 0; i < myRows; i++) {
		newMatrix[i] = myVec[i] - m2.myVec[i];
	}
	return newMatrix;
}

/* operator*() multiplies two matrices
 *
 * @param: m2, other matrix
 * @return: output, the product of the matrices
 */
template <class Item>
Matrix<Item> Matrix<Item>::operator*(const Matrix<Item>& m2) const{
	Matrix<Item> output(myRows,m2.myColumns);
	if (myColumns != m2.myRows) {
		throw invalid_argument("Matrix 1 must have as many columns and Matrix 2 has rows");
	}
	for (unsigned r = 0; r < myRows; r++){
		for (unsigned c = 0; c < m2.myColumns; c++) {
			for (unsigned i = 0; i < myColumns; i++) {
				output[r][c] += myVec[r][i] * m2.myVec[i][c];
			}
		}
	}
	return output;
}

/* getTranspose() transposes matrix (makes rows columns and columns rows).
 *
 * @return: Matrix, matrix that is the transposed of myVec.
 */
template <class Item>
Matrix<Item> Matrix<Item>::getTranspose() const{
	Matrix<Item> newMatrix(myColumns, myRows);
	for (unsigned row = 0; row < myRows; row++) {
		for (unsigned col = 0; col < myColumns; col++) {
			newMatrix.myVec[col][row] = myVec[row][col];
		}
	}
	return newMatrix;
}

#endif
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ cat mat1.txt
3 3
1 2 3
4 5 6
7 8 9]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ cat mat2.txt
3 3
10 20 30
40 50 60
70 80 90
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ cd deb[K[K[KDebug
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4/Debugbb36@noyce-kilby:~/Desktop/Projects/proj4/Debug$ ls
makefile  MatrixTester.d  [0m[01;32mproj4[0m       tester.d     VecTester.o
Matrix.d  MatrixTester.o  sources.mk  tester.o
Matrix.o  objects.mk      subdir.mk   VecTester.d
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4/Debugbb36@noyce-kilby:~/Desktop/Projects/proj4/Debug$ make all
make: Nothing to be done for `all'.
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4/Debugbb36@noyce-kilby:~/Desktop/Projects/proj4/Debug$ cd ..
]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ Debug/proj4[K[K[K[K[K[K[K[K[K[K[K./Debug/proj4
Enter 1 to run tests, or 0 to continue: 1
Running Matrix tests...
Testing default constructor... 0  1 Passed!
Testing explicit constructor... 1  2 Passed!
Testing copy constructor...  1  2  Passed!
Testing =...  0  1  2  3  4  5 Passed!
Testing ==...  1  2  3  4 Passed!
Testing subscripts...  1  2  3  4  5  6 Passed!
Testing !=...  0  1  2  3 Passed!
Testing getTranspose()...  0  1a  1b Passed!
Testing +...  0  1a  1b  2  3 Passed!
Testing -...  0  1a  1b  2  3 Passed!
Testing *... 0  1a  1b  2 Passed!
Testing readFrom(istream)... Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)... Passed!
All tests passed!






Welcome to the Matrix Application
Operations:
 1---Addition
 2---Subtraction
 3---Multiplication
 4---Transpose
 0---Quit
Please select an operation: 1
Enter name of first Matrix file(m1): mat1.txt
Enter name of second Matrix file(m2): m,a  at2.txt

m1 + m2 =
11	22	33	
44	55	66	
77	88	99	

Operations:
 1---Addition
 2---Subtraction
 3---Multiplication
 4---Transpose
 0---Quit
Please select an operation: 2
Enter name of first Matrix file(m1): mat2.txt
Enter name of second Matrix file(m2): mat1.txt

m1 - m2 =
9	18	27	
36	45	54	
63	72	81	

Operations:
 1---Addition
 2---Subtraction
 3---Multiplication
 4---Transpose
 0---Quit
Please select an operation: 3
Enter name of first Matrix file(m1): mat1.txt
Enter name of second Matrix file(m2): mat2.txt

m1 * m2 =
300	360	420	
660	810	960	
1020	1260	1500	

Operations:
 1---Addition
 2---Subtraction
 3---Multiplication
 4---Transpose
 0---Quit
Please select an operation: 4
Enter name of Matrix file: mat1.txt

m1 transposed is:
1	4	7	
2	5	8	
3	6	9	

Operations:
 1---Addition
 2---Subtraction
 3---Multiplication
 4---Transpose
 0---Quit
Please select an operation: 0
Goodbye]0;bb36@noyce-kilby: ~/Desktop/Projects/proj4bb36@noyce-kilby:~/Desktop/Projects/proj4$ exit

Script done on Mon 09 Mar 2015 07:18:24 PM EDT
